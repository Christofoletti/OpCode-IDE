/* Generated By:JavaCC: Do not edit this line. AsmCharStream.java Version 5.0 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.com.objectware.assembler.asmlexer;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (with java-like unicode escape processing).
 */
import java.io.IOException;
import org.netbeans.spi.lexer.LexerInput;

/**
 * Taken from https://platform.netbeans.org/tutorials/nbm-javacc-lexer.html
 * @author Geertjan's
 */
public class AsmCharStream {
    
    private final LexerInput input;
    
    public AsmCharStream(LexerInput input) {
        this.input = input;
    }
    
    char beginToken() throws IOException {
        return this.readChar();
    }
    
    String getImage() {
        return this.input.readText().toString();
    }
    
    public char[] getSuffix(int len) {
        if (len > this.input.readLength()) {
            throw new IllegalArgumentException();
        }
        return this.input.readText(
            this.input.readLength() - len, this.input.readLength()
        ).toString().toCharArray();
    }
    
    void backup(int i) {
        this.input.backup(i);
    }
    
    int getBeginColumn() {
        return 0;
    }
    
    int getBeginLine() {
        return 0;
    }
    
    int getEndColumn() {
        return 0;
    }
    
    int getEndLine() {
        return 0;
    }
    
    char readChar() throws IOException {
        int result = this.input.read();
        if (result == LexerInput.EOF) {
            throw new IOException("LexerInput EOF");
        }
        return (char) result;
    }
}
