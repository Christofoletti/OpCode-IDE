/* Generated By:JavaCC: Do not edit this line. ASMParserConstants.java */
package br.com.objectware.assembler.asmlexer;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ASMParserConstants {
    
    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int SINGLE_LINE_COMMENT = 8;
    /** RegularExpression Id. */
    int MULTI_LINE_COMMENT = 9;
    
    /** RegularExpression Id. */
    int A = 11;
    /** RegularExpression Id. */
    int B = 12;
    /** RegularExpression Id. */
    int C = 13;
    /** RegularExpression Id. */
    int D = 14;
    /** RegularExpression Id. */
    int E = 15;
    /** RegularExpression Id. */
    int H = 16;
    /** RegularExpression Id. */
    int L = 17;
    /** RegularExpression Id. */
    int I = 18;
    /** RegularExpression Id. */
    int R = 19;
    /** RegularExpression Id. */
    int AF = 20;
    /** RegularExpression Id. */
    int BC = 21;
    /** RegularExpression Id. */
    int DE = 22;
    /** RegularExpression Id. */
    int HL = 23;
    /** RegularExpression Id. */
    int IX = 24;
    /** RegularExpression Id. */
    int IY = 25;
    /** RegularExpression Id. */
    int SP = 26;
    /** RegularExpression Id. */
    int IXH = 27;
    /** RegularExpression Id. */
    int IXL = 28;
    /** RegularExpression Id. */
    int IYH = 29;
    /** RegularExpression Id. */
    int IYL = 30;
    
    /** RegularExpression Id. */
    int M = 31;
    /** RegularExpression Id. */
    int NC = 32;
    /** RegularExpression Id. */
    int NZ = 33;
    /** RegularExpression Id. */
    int P = 34;
    /** RegularExpression Id. */
    int PE = 35;
    /** RegularExpression Id. */
    int PO = 36;
    /** RegularExpression Id. */
    int Z = 37;
    
    /** RegularExpression Id. */
    int ADC = 38;
    /** RegularExpression Id. */
    int ADD = 39;
    /** RegularExpression Id. */
    int AND = 40;
    /** RegularExpression Id. */
    int BIT = 41;
    /** RegularExpression Id. */
    int BYTE = 42;
    /** RegularExpression Id. */
    int CALL = 43;
    /** RegularExpression Id. */
    int CCF = 44;
    /** RegularExpression Id. */
    int CP = 45;
    /** RegularExpression Id. */
    int CPD = 46;
    /** RegularExpression Id. */
    int CPDR = 47;
    /** RegularExpression Id. */
    int CPI = 48;
    /** RegularExpression Id. */
    int CPIR = 49;
    /** RegularExpression Id. */
    int CPL = 50;
    /** RegularExpression Id. */
    int DAA = 51;
    /** RegularExpression Id. */
    int DEC = 52;
    /** RegularExpression Id. */
    int DI = 53;
    /** RegularExpression Id. */
    int DJNZ = 54;
    /** RegularExpression Id. */
    int EI = 55;
    /** RegularExpression Id. */
    int EX = 56;
    /** RegularExpression Id. */
    int EXX = 57;
    /** RegularExpression Id. */
    int HALT = 58;
    /** RegularExpression Id. */
    int IM = 59;
    /** RegularExpression Id. */
    int IN = 60;
    /** RegularExpression Id. */
    int INC = 61;
    /** RegularExpression Id. */
    int IND = 62;
    /** RegularExpression Id. */
    int INDR = 63;
    /** RegularExpression Id. */
    int INI = 64;
    /** RegularExpression Id. */
    int INIR = 65;
    /** RegularExpression Id. */
    int JP = 66;
    /** RegularExpression Id. */
    int JR = 67;
    /** RegularExpression Id. */
    int LD = 68;
    /** RegularExpression Id. */
    int LDD = 69;
    /** RegularExpression Id. */
    int LDDR = 70;
    /** RegularExpression Id. */
    int LDI = 71;
    /** RegularExpression Id. */
    int LDIR = 72;
    /** RegularExpression Id. */
    int NEG = 73;
    /** RegularExpression Id. */
    int NOP = 74;
    /** RegularExpression Id. */
    int OR = 75;
    /** RegularExpression Id. */
    int OTDR = 76;
    /** RegularExpression Id. */
    int OTIR = 77;
    /** RegularExpression Id. */
    int OUT = 78;
    /** RegularExpression Id. */
    int OUTD = 79;
    /** RegularExpression Id. */
    int OUTI = 80;
    /** RegularExpression Id. */
    int POP = 81;
    /** RegularExpression Id. */
    int PUSH = 82;
    /** RegularExpression Id. */
    int RES = 83;
    /** RegularExpression Id. */
    int RET = 84;
    /** RegularExpression Id. */
    int RETI = 85;
    /** RegularExpression Id. */
    int RETN = 86;
    /** RegularExpression Id. */
    int RL = 87;
    /** RegularExpression Id. */
    int RLA = 88;
    /** RegularExpression Id. */
    int RLC = 89;
    /** RegularExpression Id. */
    int RLCA = 90;
    /** RegularExpression Id. */
    int RLD = 91;
    /** RegularExpression Id. */
    int RR = 92;
    /** RegularExpression Id. */
    int RRA = 93;
    /** RegularExpression Id. */
    int RRC = 94;
    /** RegularExpression Id. */
    int RRCA = 95;
    /** RegularExpression Id. */
    int RRD = 96;
    /** RegularExpression Id. */
    int RST = 97;
    /** RegularExpression Id. */
    int SBC = 98;
    /** RegularExpression Id. */
    int SCF = 99;
    /** RegularExpression Id. */
    int SET = 100;
    /** RegularExpression Id. */
    int SLA = 101;
    /** RegularExpression Id. */
    int SLL = 102;
    /** RegularExpression Id. */
    int SRA = 103;
    /** RegularExpression Id. */
    int SRL = 104;
    /** RegularExpression Id. */
    int SUB = 105;
    /** RegularExpression Id. */
    int XOR = 106;
    
    /** RegularExpression Id. */
    int IF = 107;
    /** RegularExpression Id. */
    int DB = 108;
    /** RegularExpression Id. */
    int DS = 109;
    /** RegularExpression Id. */
    int DW = 110;
    /** RegularExpression Id. */
    int END = 111;
    /** RegularExpression Id. */
    int EQU = 112;
    /** RegularExpression Id. */
    int ORG = 113;
    /** RegularExpression Id. */
    int DEFB = 114;
    /** RegularExpression Id. */
    int DEFW = 115;
    /** RegularExpression Id. */
    int ELSE = 116;
    /** RegularExpression Id. */
    int ENDIF = 117;
    /** RegularExpression Id. */
    int DEFINE = 118;
    /** RegularExpression Id. */
    int INCBIN = 119;
    /** RegularExpression Id. */
    int INCSRC = 120;
    /** RegularExpression Id. */
    int INCLUDE = 121;
    /** RegularExpression Id. */
    int ONCE = 122;
    /** RegularExpression Id. */
    int REPT = 123;
    /** RegularExpression Id. */
    int ENDR = 124;
    /** RegularExpression Id. */
    int PROC = 125;
    /** RegularExpression Id. */
    int ENDP = 126;
    /** RegularExpression Id. */
    int ENDM = 127;
    /** RegularExpression Id. */
    int MACRO = 128;
    /** RegularExpression Id. */
    int SECTION = 129;
    
    /** RegularExpression Id. */
    int LPAREN = 130;
    /** RegularExpression Id. */
    int RPAREN = 131;
    /** RegularExpression Id. */
    int LBRACE = 132;
    /** RegularExpression Id. */
    int RBRACE = 133;
    /** RegularExpression Id. */
    int LBRACKET = 134;
    /** RegularExpression Id. */
    int RBRACKET = 135;
    /** RegularExpression Id. */
    int COMMA = 136;
    /** RegularExpression Id. */
    int DOT = 137;
    
    /** RegularExpression Id. */
    int ASSIGN = 138;
    /** RegularExpression Id. */
    int GT = 139;
    /** RegularExpression Id. */
    int LT = 140;
    /** RegularExpression Id. */
    int BANG = 141;
    /** RegularExpression Id. */
    int TILDE = 142;
    /** RegularExpression Id. */
    int HOOK = 143;
    /** RegularExpression Id. */
    int COLON = 144;
    /** RegularExpression Id. */
    int EQ = 145;
    /** RegularExpression Id. */
    int LE = 146;
    /** RegularExpression Id. */
    int GE = 147;
    /** RegularExpression Id. */
    int NE = 148;
    /** RegularExpression Id. */
    int SC_OR = 149;
    /** RegularExpression Id. */
    int SC_AND = 150;
    /** RegularExpression Id. */
    int INCR = 151;
    /** RegularExpression Id. */
    int DECR = 152;
    /** RegularExpression Id. */
    int PLUS = 153;
    /** RegularExpression Id. */
    int MINUS = 154;
    /** RegularExpression Id. */
    int STAR = 155;
    /** RegularExpression Id. */
    int SLASH = 156;
    /** RegularExpression Id. */
    int BIT_AND = 157;
    /** RegularExpression Id. */
    int BIT_OR = 158;
    /** RegularExpression Id. */
    int BIT_XOR = 159;
    /** RegularExpression Id. */
    int REM = 160;
    
    /** RegularExpression Id. */
    int BR = 161;
    /** RegularExpression Id. */
    int OBJECTWARE = 162;
    
    /** RegularExpression Id. */
    int INTEGER_LITERAL = 163;
    /** RegularExpression Id. */
    int DECIMAL_LITERAL = 164;
    /** RegularExpression Id. */
    int HEX_LITERAL = 165;
    /** RegularExpression Id. */
    int OCTAL_LITERAL = 166;
    /** RegularExpression Id. */
    int BINARY_LITERAL = 167;
    /** RegularExpression Id. */
    int FLOATING_POINT_LITERAL = 168;
    /** RegularExpression Id. */
    int EXPONENT = 169;
    /** RegularExpression Id. */
    int CHARACTER_LITERAL = 170;
    /** RegularExpression Id. */
    int STRING_LITERAL = 171;
    /** RegularExpression Id. */
    int IDENTIFIER = 172;
    /** RegularExpression Id. */
    int LABEL = 173;
    /** RegularExpression Id. */
    int LETTER = 174;
    /** RegularExpression Id. */
    int DIGIT = 175;
    /** RegularExpression Id. */
    int ERROR = 176;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int IN_SINGLE_LINE_COMMENT = 1;
    /** Lexical state. */
    int IN_MULTI_LINE_COMMENT = 2;

    /** Literal token values. */
    String[] tokenImage = {
      "<EOF>",
      "\" \"",
      "\"\\t\"",
      "\"\\n\"",
      "\"\\r\"",
      "\"\\f\"",
      "\";\"",
      "\"/*\"",
      "<SINGLE_LINE_COMMENT>",
      "\"*/\"",
      "<token of kind 10>",
      "\"a\"",
      "\"b\"",
      "\"c\"",
      "\"d\"",
      "\"e\"",
      "\"h\"",
      "\"l\"",
      "\"i\"",
      "\"r\"",
      "\"af\"",
      "\"bc\"",
      "\"de\"",
      "\"hl\"",
      "\"ix\"",
      "\"iy\"",
      "\"sp\"",
      "\"ixh\"",
      "\"ixl\"",
      "\"iyh\"",
      "\"iyl\"",
      "\"m\"",
      "\"nc\"",
      "\"nz\"",
      "\"p\"",
      "\"pe\"",
      "\"po\"",
      "\"z\"",
      "\"adc\"",
      "\"add\"",
      "\"and\"",
      "\"bit\"",
      "\"byte\"",
      "\"call\"",
      "\"ccf\"",
      "\"cp\"",
      "\"cpd\"",
      "\"cpdr\"",
      "\"cpi\"",
      "\"cpir\"",
      "\"cpl\"",
      "\"daa\"",
      "\"dec\"",
      "\"di\"",
      "\"djnz\"",
      "\"ei\"",
      "\"ex\"",
      "\"exx\"",
      "\"halt\"",
      "\"im\"",
      "\"in\"",
      "\"inc\"",
      "\"ind\"",
      "\"indr\"",
      "\"ini\"",
      "\"inir\"",
      "\"jp\"",
      "\"jr\"",
      "\"ld\"",
      "\"ldd\"",
      "\"lddr\"",
      "\"ldi\"",
      "\"ldir\"",
      "\"neg\"",
      "\"nop\"",
      "\"or\"",
      "\"otdr\"",
      "\"otir\"",
      "\"out\"",
      "\"outd\"",
      "\"outi\"",
      "\"pop\"",
      "\"push\"",
      "\"res\"",
      "\"ret\"",
      "\"reti\"",
      "\"retn\"",
      "\"rl\"",
      "\"rla\"",
      "\"rlc\"",
      "\"rlca\"",
      "\"rld\"",
      "\"rr\"",
      "\"rra\"",
      "\"rrc\"",
      "\"rrca\"",
      "\"rrd\"",
      "\"rst\"",
      "\"sbc\"",
      "\"scf\"",
      "\"set\"",
      "\"sla\"",
      "\"sll\"",
      "\"sra\"",
      "\"srl\"",
      "\"sub\"",
      "\"xor\"",
      "\"if\"",
      "\"db\"",
      "\"ds\"",
      "\"dw\"",
      "\"end\"",
      "\"equ\"",
      "\"org\"",
      "\"defb\"",
      "\"defw\"",
      "\"else\"",
      "\"endif\"",
      "\"define\"",
      "\"incbin\"",
      "\"incsrc\"",
      "\"include\"",
      "\"once\"",
      "\"rept\"",
      "\"endr\"",
      "\"proc\"",
      "\"endp\"",
      "\"endm\"",
      "\"macro\"",
      "\"section\"",
      "\"(\"",
      "\")\"",
      "\"{\"",
      "\"}\"",
      "\"[\"",
      "\"]\"",
      "\",\"",
      "\".\"",
      "\"=\"",
      "\">\"",
      "\"<\"",
      "\"!\"",
      "\"~\"",
      "\"?\"",
      "\":\"",
      "\"==\"",
      "\"<=\"",
      "\">=\"",
      "\"!=\"",
      "\"||\"",
      "\"&&\"",
      "\"++\"",
      "\"--\"",
      "\"+\"",
      "\"-\"",
      "\"*\"",
      "\"/\"",
      "\"&\"",
      "\"|\"",
      "\"^\"",
      "\"%\"",
      "\"br\"",
      "\"objectware\"",
      "<INTEGER_LITERAL>",
      "<DECIMAL_LITERAL>",
      "<HEX_LITERAL>",
      "<OCTAL_LITERAL>",
      "<BINARY_LITERAL>",
      "<FLOATING_POINT_LITERAL>",
      "<EXPONENT>",
      "<CHARACTER_LITERAL>",
      "<STRING_LITERAL>",
      "<IDENTIFIER>",
      "<LABEL>",
      "<LETTER>",
      "<DIGIT>",
      "<ERROR>",
    };
}