/* ASMParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ASMParserTokenManager.java */
package br.com.objectware.assembler.asmlexer;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class ASMParserTokenManager implements ASMParserConstants {
    
    private int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active2 & 0x200L) != 0L) {
                    return 62;
                }
                if ((active0 & 0x3cL) != 0L) {
                    return 35;
                }
                if ((active0 & 0xfffffffcfbfff800L) != 0L || (active1 & 0xfbfdf803fffe01f3L) != 0L || (active2 & 0x200000001L) != 0L) {
                    return 63;
                }
                if ((active0 & 0x304000000L) != 0L || (active1 & 0x40207fc0001fe0cL) != 0L || (active2 & 0x400000002L) != 0L) {
                    jjmatchedKind = 172;
                    return 63;
                }
                return -1;
            case 1:
                if ((active0 & 0x4481fc000000000L) != 0L || (active1 & 0xfc3187fe007df600L) != 0L || (active2 & 0x400000003L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 172;
                        jjmatchedPos = 1;
                    }
                    return 63;
                }
                if ((active0 & 0xfbb7e01b7ff00000L) != 0L || (active1 & 0x3ce7801ff8209ffL) != 0L || (active2 & 0x200000000L) != 0L) {
                    return 63;
                }
                return -1;
            case 2:
                if ((active0 & 0xe21fd3c078000000L) != 0L || (active1 & 0xd3a387ffef7bc7e3L) != 0L) {
                    return 63;
                }
                if ((active0 & 0x4400c0000000000L) != 0L || (active1 & 0x2c5c000000043000L) != 0L || (active2 & 0x400000003L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 172;
                        jjmatchedPos = 2;
                    }
                    return 63;
                }
                return -1;
            case 3:
                if ((active1 & 0x3e0000000000000L) != 0L || (active2 & 0x400000003L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 3;
                    return 63;
                }
                if ((active0 & 0x84428c0000000000L) != 0L || (active1 & 0xfc1c00008465b142L) != 0L) {
                    return 63;
                }
                return -1;
            case 4:
                if ((active1 & 0x20000000000000L) != 0L || (active2 & 0x1L) != 0L) {
                    return 63;
                }
                if ((active1 & 0x3c0000000000000L) != 0L || (active2 & 0x400000002L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 4;
                    return 63;
                }
                return -1;
            case 5:
                if ((active1 & 0x200000000000000L) != 0L || (active2 & 0x400000002L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 5;
                    return 63;
                }
                if ((active1 & 0x1c0000000000000L) != 0L) {
                    return 63;
                }
                return -1;
            case 6:
                if ((active1 & 0x200000000000000L) != 0L || (active2 & 0x2L) != 0L) {
                    return 63;
                }
                if ((active2 & 0x400000000L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 6;
                    return 63;
                }
                return -1;
            case 7:
                if ((active2 & 0x400000000L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 7;
                    return 63;
                }
                return -1;
            case 8:
                if ((active2 & 0x400000000L) != 0L) {
                    jjmatchedKind = 172;
                    jjmatchedPos = 8;
                    return 63;
                }
                return -1;
            default:
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 9:
                return jjStartNfaWithStates_0(0, 2, 35);
            case 10:
                return jjStartNfaWithStates_0(0, 3, 35);
            case 12:
                return jjStartNfaWithStates_0(0, 5, 35);
            case 13:
                return jjStartNfaWithStates_0(0, 4, 35);
            case 33:
                jjmatchedKind = 141;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
            case 37:
                return jjStopAtPos(0, 160);
            case 38:
                jjmatchedKind = 157;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
            case 40:
                return jjStopAtPos(0, 130);
            case 41:
                return jjStopAtPos(0, 131);
            case 42:
                return jjStopAtPos(0, 155);
            case 43:
                jjmatchedKind = 153;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000L);
            case 44:
                return jjStopAtPos(0, 136);
            case 45:
                jjmatchedKind = 154;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
            case 46:
                return jjStartNfaWithStates_0(0, 137, 62);
            case 47:
                jjmatchedKind = 156;
                return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L);
            case 58:
                return jjStopAtPos(0, 144);
            case 59:
                return jjStopAtPos(0, 6);
            case 60:
                jjmatchedKind = 140;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
            case 61:
                jjmatchedKind = 138;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
            case 62:
                jjmatchedKind = 139;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
            case 63:
                return jjStopAtPos(0, 143);
            case 91:
                return jjStopAtPos(0, 134);
            case 93:
                return jjStopAtPos(0, 135);
            case 94:
                return jjStopAtPos(0, 159);
            case 65:
            case 97:
                jjmatchedKind = 11;
                return jjMoveStringLiteralDfa1_0(0x1c000100000L, 0x0L, 0x0L);
            case 66:
            case 98:
                jjmatchedKind = 12;
                return jjMoveStringLiteralDfa1_0(0x60000200000L, 0x0L, 0x200000000L);
            case 67:
            case 99:
                jjmatchedKind = 13;
                return jjMoveStringLiteralDfa1_0(0x7f80000000000L, 0x0L, 0x0L);
            case 68:
            case 100:
                jjmatchedKind = 14;
                return jjMoveStringLiteralDfa1_0(0x78000000400000L, 0x4c700000000000L, 0x0L);
            case 69:
            case 101:
                jjmatchedKind = 15;
                return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0xd031800000000000L, 0x0L);
            case 72:
            case 104:
                jjmatchedKind = 16;
                return jjMoveStringLiteralDfa1_0(0x400000000800000L, 0x0L, 0x0L);
            case 73:
            case 105:
                jjmatchedKind = 18;
                return jjMoveStringLiteralDfa1_0(0xf80000007b000000L, 0x380080000000003L, 0x0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xcL, 0x0L);
            case 76:
            case 108:
                jjmatchedKind = 17;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0L, 0x0L);
            case 77:
            case 109:
                jjmatchedKind = 31;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x300000000L, 0x600L, 0x0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40200000001f800L, 0x400000000L);
            case 80:
            case 112:
                jjmatchedKind = 34;
                return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x2000000000060000L, 0x0L);
            case 82:
            case 114:
                jjmatchedKind = 19;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8000003fff80000L, 0x0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x4000000L, 0x3fc00000000L, 0x2L);
            case 88:
            case 120:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
            case 90:
            case 122:
                return jjStartNfaWithStates_0(0, 37, 63);
            case 123:
                return jjStopAtPos(0, 132);
            case 124:
                jjmatchedKind = 158;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
            case 125:
                return jjStopAtPos(0, 133);
            case 126:
                return jjStopAtPos(0, 142);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2) {
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active2 & 0x400000L) != 0L) {
                    return jjStopAtPos(1, 150);
                }
                break;
            case 42:
                if ((active0 & 0x80L) != 0L) {
                    return jjStopAtPos(1, 7);
                }
                break;
            case 43:
                if ((active2 & 0x800000L) != 0L) {
                    return jjStopAtPos(1, 151);
                }
                break;
            case 45:
                if ((active2 & 0x1000000L) != 0L) {
                    return jjStopAtPos(1, 152);
                }
                break;
            case 61:
                if ((active2 & 0x20000L) != 0L) {
                    return jjStopAtPos(1, 145);
                } else if ((active2 & 0x40000L) != 0L) {
                    return jjStopAtPos(1, 146);
                } else if ((active2 & 0x80000L) != 0L) {
                    return jjStopAtPos(1, 147);
                } else if ((active2 & 0x100000L) != 0L) {
                    return jjStopAtPos(1, 148);
                }
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x408080000000000L, active1, 0L, active2, 0x1L);
            case 66:
            case 98:
                if ((active1 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 108, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0x400000000L);
            case 67:
            case 99:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 21, 63);
                } else if ((active0 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 32, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x800000000L, active2, 0L);
            case 68:
            case 100:
                if ((active1 & 0x10L) != 0L) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0x1e0L, active2, 0L);
            case 69:
            case 101:
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 35, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x84c001000780200L, active2, 0x2L);
            case 70:
            case 102:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 20, 63);
                } else if ((active1 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 107, 63);
                }
                break;
            case 73:
            case 105:
                if ((active0 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 53, 63);
                } else if ((active0 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 55, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
            case 76:
            case 108:
                if ((active0 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 23, 63);
                } else if ((active1 & 0x800000L) != 0L) {
                    jjmatchedKind = 87;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000600f000000L, active2, 0L);
            case 77:
            case 109:
                if ((active0 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 59, 63);
                }
                break;
            case 78:
            case 110:
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 60;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xe000010000000000L, active1, 0xd7a0800000000003L, active2, 0L);
            case 79:
            case 111:
                if ((active0 & 0x1000000000L) != 0L) {
                    jjmatchedKind = 36;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000020400L, active2, 0L);
            case 80:
            case 112:
                if ((active0 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 26, 63);
                } else if ((active0 & 0x200000000000L) != 0L) {
                    jjmatchedKind = 45;
                    jjmatchedPos = 1;
                } else if ((active1 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(1, 66, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x7c00000000000L, active1, 0L, active2, 0L);
            case 81:
            case 113:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
            case 82:
            case 114:
                if ((active1 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(1, 67, 63);
                } else if ((active1 & 0x800L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 1;
                } else if ((active1 & 0x10000000L) != 0L) {
                    jjmatchedKind = 92;
                    jjmatchedPos = 1;
                } else if ((active2 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 161, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20020181e0000000L, active2, 0L);
            case 83:
            case 115:
                if ((active1 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 109, 63);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000005c000L, active2, 0L);
            case 87:
            case 119:
                if ((active1 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 110, 63);
                }
                break;
            case 88:
            case 120:
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x100000000000000L) != 0L) {
                    jjmatchedKind = 56;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x200000018000000L, active1, 0L, active2, 0L);
            case 89:
            case 121:
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x40060000000L, active1, 0L, active2, 0L);
            case 90:
            case 122:
                if ((active0 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 33, 63);
                }
                break;
            case 124:
                if ((active2 & 0x200000L) != 0L) {
                    return jjStopAtPos(1, 149);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(0, old0, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2);
            return 2;
        }
        switch (curChar) {
            case 65:
            case 97:
                if ((active0 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 51, 63);
                } else if ((active1 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 88, 63);
                } else if ((active1 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 93, 63);
                } else if ((active1 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 101, 63);
                } else if ((active1 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 103, 63);
                }
                break;
            case 66:
            case 98:
                if ((active1 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 105, 63);
                }
                break;
            case 67:
            case 99:
                if ((active0 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 38, 63);
                } else if ((active0 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 52, 63);
                } else if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 61;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x2000000L) != 0L) {
                    jjmatchedKind = 89;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x40000000L) != 0L) {
                    jjmatchedKind = 94;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 98, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x780000084000000L, active2, 0x3L);
            case 68:
            case 100:
                if ((active0 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 39, 63);
                } else if ((active0 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 40, 63);
                } else if ((active0 & 0x400000000000L) != 0L) {
                    jjmatchedKind = 46;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x4000000000000000L) != 0L) {
                    jjmatchedKind = 62;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x20L) != 0L) {
                    jjmatchedKind = 69;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 91, 63);
                } else if ((active1 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 96, 63);
                } else if ((active1 & 0x800000000000L) != 0L) {
                    jjmatchedKind = 111;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x8000800000000000L, active1, 0xd020000000001040L, active2, 0L);
            case 70:
            case 102:
                if ((active0 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 44, 63);
                } else if ((active1 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 99, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4c000000000000L, active2, 0L);
            case 71:
            case 103:
                if ((active1 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(2, 73, 63);
                } else if ((active1 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 113, 63);
                }
                break;
            case 72:
            case 104:
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 27, 63);
                } else if ((active0 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 29, 63);
                }
                break;
            case 73:
            case 105:
                if ((active0 & 0x1000000000000L) != 0L) {
                    jjmatchedKind = 48;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x1L) != 0L) {
                    jjmatchedKind = 64;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x80L) != 0L) {
                    jjmatchedKind = 71;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x2102L, active2, 0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000L);
            case 76:
            case 108:
                if ((active0 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 28, 63);
                } else if ((active0 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 30, 63);
                } else if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 50, 63);
                } else if ((active1 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 102, 63);
                } else if ((active1 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 104, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x400080000000000L, active1, 0L, active2, 0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(2, 74, 63);
                } else if ((active1 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 81, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
            case 82:
            case 114:
                if ((active1 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 106, 63);
                }
                break;
            case 83:
            case 115:
                if ((active1 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 83, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000040000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 41, 63);
                } else if ((active1 & 0x4000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x100000L) != 0L) {
                    jjmatchedKind = 84;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 97, 63);
                } else if ((active1 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 100, 63);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x618000L, active2, 0L);
            case 85:
            case 117:
                if ((active1 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 112, 63);
                }
                break;
            case 88:
            case 120:
                if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 57, 63);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(1, old0, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2);
            return 3;
        }
        switch (curChar) {
            case 65:
            case 97:
                if ((active1 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 90, 63);
                } else if ((active1 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 95, 63);
                }
                break;
            case 66:
            case 98:
                if ((active1 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 114, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
            case 67:
            case 99:
                if ((active1 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 125, 63);
                }
                break;
            case 68:
            case 100:
                if ((active1 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 79, 63);
                }
                break;
            case 69:
            case 101:
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 42, 63);
                } else if ((active1 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 116, 63);
                } else if ((active1 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 122, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000L);
            case 72:
            case 104:
                if ((active1 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 82, 63);
                }
                break;
            case 73:
            case 105:
                if ((active1 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 80, 63);
                } else if ((active1 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 85, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000000000000L, active2, 0L);
            case 76:
            case 108:
                if ((active0 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 43, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 127, 63);
                }
                break;
            case 78:
            case 110:
                if ((active1 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 86, 63);
                }
                break;
            case 80:
            case 112:
                if ((active1 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 126, 63);
                }
                break;
            case 82:
            case 114:
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 47, 63);
                } else if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 49, 63);
                } else if ((active0 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 63, 63);
                } else if ((active1 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(3, 65, 63);
                } else if ((active1 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(3, 70, 63);
                } else if ((active1 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(3, 72, 63);
                } else if ((active1 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 76, 63);
                } else if ((active1 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 77, 63);
                } else if ((active1 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 124, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 58, 63);
                } else if ((active1 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 123, 63);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2L);
            case 87:
            case 119:
                if ((active1 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 115, 63);
                }
                break;
            case 90:
            case 122:
                if ((active0 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 54, 63);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(2, old0, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, 0L, active1, active2);
            return 4;
        }
        switch (curChar) {
            case 67:
            case 99:
                return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x400000000L);
            case 70:
            case 102:
                if ((active1 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 117, 63);
                }
                break;
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active1, 0x80000000000000L, active2, 0x2L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa5_0(active1, 0x40000000000000L, active2, 0L);
            case 79:
            case 111:
                if ((active2 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(4, 128, 63);
                }
                break;
            case 82:
            case 114:
                return jjMoveStringLiteralDfa5_0(active1, 0x100000000000000L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa5_0(active1, 0x200000000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_0(3, 0L, active1, active2);
    }

    private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(3, 0L, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, 0L, active1, active2);
            return 5;
        }
        switch (curChar) {
            case 67:
            case 99:
                if ((active1 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 120, 63);
                }
                break;
            case 68:
            case 100:
                return jjMoveStringLiteralDfa6_0(active1, 0x200000000000000L, active2, 0L);
            case 69:
            case 101:
                if ((active1 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 118, 63);
                }
                break;
            case 78:
            case 110:
                if ((active1 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 119, 63);
                }
                break;
            case 79:
            case 111:
                return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x2L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(4, 0L, active1, active2);
    }

    private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(4, 0L, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, 0L, active1, active2);
            return 6;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active1 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 121, 63);
                }
                break;
            case 78:
            case 110:
                if ((active2 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(6, 129, 63);
                }
                break;
            case 87:
            case 119:
                return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(5, 0L, active1, active2);
    }

    private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L) {
            return jjStartNfa_0(5, 0L, old1, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, 0L, 0L, active2);
            return 7;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa8_0(active2, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(6, 0L, 0L, active2);
    }

    private int jjMoveStringLiteralDfa8_0(long old2, long active2) {
        if (((active2 &= old2)) == 0L) {
            return jjStartNfa_0(6, 0L, 0L, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, 0L, 0L, active2);
            return 8;
        }
        switch (curChar) {
            case 82:
            case 114:
                return jjMoveStringLiteralDfa9_0(active2, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(7, 0L, 0L, active2);
    }

    private int jjMoveStringLiteralDfa9_0(long old2, long active2) {
        if (((active2 &= old2)) == 0L) {
            return jjStartNfa_0(7, 0L, 0L, old2);
        }
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, 0L, 0L, active2);
            return 9;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active2 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 162, 63);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(8, 0L, 0L, active2);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec3 = {
        0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
    };
    static final long[] jjbitVec4 = {
        0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec5 = {
        0x3fffffffffL, 0x0L, 0x0L, 0x0L
    };
    static final long[] jjbitVec6 = {
        0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec7 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
    };
    static final long[] jjbitVec8 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
    };
    static final long[] jjbitVec9 = {
        0x3fffffffffffL, 0x0L, 0x0L, 0x0L
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 62;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 63:
                            if ((0x3ff401000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            } else if (curChar == 58) {
                                if (kind > 173) {
                                    kind = 173;
                                }
                            }
                            if ((0x3ff401000000000L & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            break;
                        case 62:
                            if ((0x3ff401000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            } else if (curChar == 58) {
                                if (kind > 173) {
                                    kind = 173;
                                }
                            }
                            if ((0x3ff401000000000L & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 168) {
                                    kind = 168;
                                }
                                {
                                    jjCheckNAddStates(0, 2);
                                }
                            }
                            break;
                        case 0:
                            if ((0x8cffffffffL & l) != 0L) {
                                if (kind > 176) {
                                    kind = 176;
                                }
                                {
                                    jjCheckNAdd(35);
                                }
                            } else if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(3, 12);
                            } else if ((0x401000000000L & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAddStates(13, 15);
                                }
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 163) {
                                    kind = 163;
                                }
                                {
                                    jjCheckNAddTwoStates(1, 2);
                                }
                            } else if (curChar == 48) {
                                if (kind > 163) {
                                    kind = 163;
                                }
                                {
                                    jjCheckNAddStates(16, 18);
                                }
                            } else if (curChar == 34) {
                                jjCheckNAddStates(19, 21);
                            } else if (curChar == 39) {
                                jjAddStates(22, 23);
                            } else if (curChar == 46) {
                                jjCheckNAdd(12);
                            } else if (curChar == 35) {
                                jjCheckNAdd(6);
                            } else if (curChar == 36) {
                                jjCheckNAdd(4);
                            }
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(7, 8);
                            }
                            if ((0x3000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 3:
                            if (curChar == 36) {
                                jjCheckNAdd(4);
                            }
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(4, 2);
                            }
                            break;
                        case 5:
                            if (curChar == 35) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(6, 2);
                            }
                            break;
                        case 7:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(7, 8);
                            }
                            break;
                        case 9:
                            if ((0x3000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 11:
                            if (curChar == 46) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 14:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(15);
                            }
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddTwoStates(15, 16);
                            }
                            break;
                        case 17:
                            if (curChar == 39) {
                                jjAddStates(22, 23);
                            }
                            break;
                        case 18:
                            if ((0xffffff7fffffdbffL & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 19:
                            if (curChar == 39 && kind > 170) {
                                kind = 170;
                            }
                            break;
                        case 21:
                            if ((0x8400000000L & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 22:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(23, 19);
                            }
                            break;
                        case 23:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 24:
                            if ((0xf000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 25;
                            }
                            break;
                        case 25:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAdd(23);
                            }
                            break;
                        case 26:
                            if (curChar == 34) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 27:
                            if ((0xfffffffbffffdbffL & l) != 0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 29:
                            if ((0x8400000000L & l) != 0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 30:
                            if (curChar == 34 && kind > 171) {
                                kind = 171;
                            }
                            break;
                        case 31:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAddStates(24, 27);
                            }
                            break;
                        case 32:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 33:
                            if ((0xf000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            break;
                        case 34:
                            if ((0xff000000000000L & l) != 0L) {
                                jjCheckNAdd(32);
                            }
                            break;
                        case 35:
                            if ((0x8cffffffffL & l) == 0L) {
                                break;
                            }
                            if (kind > 176) {
                                kind = 176;
                            }
                             {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 36:
                            if (curChar != 48) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddStates(16, 18);
                            }
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(38, 2);
                            }
                            break;
                        case 39:
                            if ((0xff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(39, 2);
                            }
                            break;
                        case 40:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(3, 12);
                            }
                            break;
                        case 41:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(28, 30);
                            }
                            break;
                        case 42:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(42, 43);
                            }
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            break;
                        case 45:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddStates(31, 33);
                            }
                            break;
                        case 46:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddStates(31, 33);
                            }
                            break;
                        case 48:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 49:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddTwoStates(49, 16);
                            }
                            break;
                        case 50:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(50, 51);
                            }
                            break;
                        case 52:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(53);
                            }
                            break;
                        case 53:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 168) {
                                kind = 168;
                            }
                             {
                                jjCheckNAddTwoStates(53, 16);
                            }
                            break;
                        case 54:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(34, 36);
                            }
                            break;
                        case 56:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(57);
                            }
                            break;
                        case 57:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(57, 16);
                            }
                            break;
                        case 58:
                            if ((0x401000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 59:
                            if ((0x3ff401000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAdd(59);
                            }
                            break;
                        case 60:
                            if ((0x3ff401000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            break;
                        case 61:
                            if (curChar == 58 && kind > 173) {
                                kind = 173;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 63:
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            break;
                        case 62:
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAddStates(13, 15);
                                }
                            } else if ((0x110000000L & l) != 0L) {
                                if (kind > 176) {
                                    kind = 176;
                                }
                                {
                                    jjCheckNAdd(35);
                                }
                            }
                            break;
                        case 2:
                            if ((0x100000001000L & l) != 0L && kind > 163) {
                                kind = 163;
                            }
                            break;
                        case 4:
                            if ((0x7e0000007eL & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(4, 2);
                            }
                            break;
                        case 6:
                            if ((0x7e0000007eL & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(6, 2);
                            }
                            break;
                        case 8:
                            if ((0x800000008000L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 10:
                            if ((0x400000004L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 13:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(37, 38);
                            }
                            break;
                        case 16:
                            if ((0x5000000050L & l) != 0L && kind > 168) {
                                kind = 168;
                            }
                            break;
                        case 18:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 20:
                            if (curChar == 92) {
                                jjAddStates(39, 41);
                            }
                            break;
                        case 21:
                            if ((0x14404410144044L & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 27:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 28:
                            if (curChar == 92) {
                                jjAddStates(42, 44);
                            }
                            break;
                        case 29:
                            if ((0x14404410144044L & l) != 0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 35:
                            if ((0x110000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 176) {
                                kind = 176;
                            }
                             {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 37:
                            if ((0x100000001000000L & l) != 0L) {
                                jjCheckNAdd(38);
                            }
                            break;
                        case 38:
                            if ((0x7e0000007eL & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAddTwoStates(38, 2);
                            }
                            break;
                        case 42:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjAddStates(45, 46);
                            }
                            break;
                        case 43:
                            if ((0x10000000100L & l) == 0L) {
                                break;
                            }
                            if (kind > 163) {
                                kind = 163;
                            }
                             {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 47:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(47, 48);
                            }
                            break;
                        case 51:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(49, 50);
                            }
                            break;
                        case 55:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(51, 52);
                            }
                            break;
                        case 58:
                            if ((0x7fffffe87ffffffL & l) == 0L) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 59:
                            if ((0x7fffffe87ffffffL & l) == 0L) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAdd(59);
                            }
                            break;
                        case 60:
                            if ((0x7fffffe87ffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 63:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            break;
                        case 62:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAdd(59);
                                }
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            break;
                        case 0:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 176) {
                                    kind = 176;
                                }
                                {
                                    jjCheckNAdd(35);
                                }
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 172) {
                                    kind = 172;
                                }
                                {
                                    jjCheckNAddStates(13, 15);
                                }
                            }
                            break;
                        case 18:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjstateSet[jjnewStateCnt++] = 19;
                            }
                            break;
                        case 27:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(19, 21);
                            }
                            break;
                        case 35:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 176) {
                                kind = 176;
                            }
                             {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 58:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 59:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 172) {
                                kind = 172;
                            }
                             {
                                jjCheckNAdd(59);
                            }
                            break;
                        case 60:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(60, 61);
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = inputStream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_2(0x200L);
            default:
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = inputStream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x200L) != 0L) {
                    return jjStopAtPos(1, 9);
                }
                break;
            default:
                return 2;
        }
        return 2;
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 8) {
                                    kind = 8;
                                }
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (curChar == 10 && kind > 8) {
                                kind = 8;
                            }
                            break;
                        case 2:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = inputStream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        12, 13, 16, 41, 42, 43, 44, 45, 50, 51, 54, 55, 16, 59, 60, 61,
        37, 39, 2, 27, 28, 30, 18, 20, 27, 28, 32, 30, 41, 42, 43, 46,
        47, 16, 54, 55, 16, 14, 15, 21, 22, 24, 29, 31, 33, 42, 43, 48,
        49, 52, 53, 56, 57,};

    private static boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                return false;
        }
    }

    private static boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 45:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 51:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 61:
                return ((jjbitVec9[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\54",
        "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75",
        "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52",
        "\57", "\46", "\174", "\136", "\45", null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null,};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? inputStream.getImage() : im;
        beginLine = inputStream.getBeginLine();
        beginColumn = inputStream.getBeginColumn();
        endLine = inputStream.getEndLine();
        endColumn = inputStream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = inputStream.beginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            for (;;) {
                switch (curLexState) {
                    case 0:
                        try {
                            inputStream.backup(0);
                            while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L) {
                                curChar = inputStream.beginToken();
                            }
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                            jjmatchedKind = 10;
                        }
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                            jjmatchedKind = 10;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) {
                        inputStream.backup(curPos - jjmatchedPos - 1);
                    }
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = inputStream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                
                int error_line = inputStream.getEndLine();
                int error_column = inputStream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                
                try {
                    inputStream.readChar();
                    inputStream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : inputStream.getImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else {
                        error_column++;
                    }
                }
                
                if (!EOFSeen) {
                    inputStream.backup(1);
                    error_after = curPos <= 1 ? "" : inputStream.getImage();
                }
                
                //throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
                break;
            }
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /**
     * Constructor.
     */
    public ASMParserTokenManager(JavaCharStream stream) {
        this.inputStream = stream;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(JavaCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        inputStream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 62; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 3 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }
    
    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,};
    
    static final long[] jjtoToken = {0xfffffffffffffb01L, 0xffffffffffffffffL, 0x13d0fffffffffL,};
    static final long[] jjtoSkip = {0x3eL, 0x0L, 0x0L,};
    static final long[] jjtoMore = {0x4c0L, 0x0L, 0x0L,};
    
    protected JavaCharStream inputStream;
    
    private final int[] jjrounds = new int[62];
    private final int[] jjstateSet = new int[2 * 62];

    protected char curChar;
}
