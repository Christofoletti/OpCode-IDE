/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.objectware.projects.panels;

import br.com.objectware.commons.i18n.I18N;
import br.com.objectware.domain.enums.BuildSequence;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;

/**
 * Build and run project options panel.
 * 
 * @author Luciano M. Christofoletti
 * @since 06/Jun/2015
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class BuildAndRunOptionsPanel extends javax.swing.JPanel implements ActionListener {
    
    /**
     * Create the build and run project options panel
     */
    public BuildAndRunOptionsPanel() {
        
        this.initComponents();
        
        // setup i18n
        this.buildAndRunOptionsTabbedPane.setTitleAt(0, I18N.getString("build.project.options"));
        this.buildAndRunOptionsTabbedPane.setTitleAt(1, I18N.getString("clean.and.build.project.options"));
        this.buildAndRunOptionsTabbedPane.setTitleAt(2, I18N.getString("run.project.options"));
        
        this.buildSequenceLabel.setText(I18N.getString("build.sequence"));
        this.embeddedCompilerArgumentsLabel.setText(I18N.getString("embedded.compiler.arguments"));
        this.externalBuildScriptLabel.setText(I18N.getString("external.build.script"));
        this.cleanAndBuildScriptLabel.setText(I18N.getString("clean.and.build.script"));
        this.runProjectScriptLabel.setText(I18N.getString("run.project.script"));
        
        this.buildSequenceComboBox.addActionListener(this);
    }   
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    //@SuppressWarnings({"unchecked", "rawtypes"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buildAndRunOptionsTabbedPane = new javax.swing.JTabbedPane();
        buildPanel = new javax.swing.JPanel();
        buildSequenceLabel = new javax.swing.JLabel();
        buildSequenceComboBox = new javax.swing.JComboBox();
        embeddedCompilerArgumentsLabel = new javax.swing.JLabel();
        compilerArgumentsTextField = new javax.swing.JTextField();
        externalBuildScriptLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        externalBuildScriptTextArea = new javax.swing.JTextArea();
        cleanAndBuildPanel = new javax.swing.JPanel();
        cleanAndBuildScriptLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        externalCleanAndBuildTextArea = new javax.swing.JTextArea();
        runPanel = new javax.swing.JPanel();
        runProjectScriptLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        runProjectScriptTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        buildAndRunOptionsTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buildAndRunOptionsTabbedPaneStateChanged(evt);
            }
        });

        buildSequenceLabel.setText("Build Sequence:");

        buildSequenceComboBox.setModel(this.getSequencesComboModel());

        embeddedCompilerArgumentsLabel.setText("Embedded Compiler Arguments:");

        externalBuildScriptLabel.setText("External Build Script:");

        externalBuildScriptTextArea.setColumns(20);
        externalBuildScriptTextArea.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        externalBuildScriptTextArea.setRows(5);
        jScrollPane1.setViewportView(externalBuildScriptTextArea);

        javax.swing.GroupLayout buildPanelLayout = new javax.swing.GroupLayout(buildPanel);
        buildPanel.setLayout(buildPanelLayout);
        buildPanelLayout.setHorizontalGroup(
            buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buildPanelLayout.createSequentialGroup()
                        .addComponent(buildSequenceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buildSequenceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(buildPanelLayout.createSequentialGroup()
                        .addComponent(embeddedCompilerArgumentsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(compilerArgumentsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                    .addGroup(buildPanelLayout.createSequentialGroup()
                        .addComponent(externalBuildScriptLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        buildPanelLayout.setVerticalGroup(
            buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildSequenceLabel)
                    .addComponent(buildSequenceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(embeddedCompilerArgumentsLabel)
                    .addComponent(compilerArgumentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(externalBuildScriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );

        buildAndRunOptionsTabbedPane.addTab("tab1", buildPanel);

        cleanAndBuildScriptLabel.setText("Clean and Build Script:");

        externalCleanAndBuildTextArea.setColumns(20);
        externalCleanAndBuildTextArea.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        externalCleanAndBuildTextArea.setRows(5);
        jScrollPane2.setViewportView(externalCleanAndBuildTextArea);

        javax.swing.GroupLayout cleanAndBuildPanelLayout = new javax.swing.GroupLayout(cleanAndBuildPanel);
        cleanAndBuildPanel.setLayout(cleanAndBuildPanelLayout);
        cleanAndBuildPanelLayout.setHorizontalGroup(
            cleanAndBuildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cleanAndBuildPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cleanAndBuildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(cleanAndBuildPanelLayout.createSequentialGroup()
                        .addComponent(cleanAndBuildScriptLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        cleanAndBuildPanelLayout.setVerticalGroup(
            cleanAndBuildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cleanAndBuildPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cleanAndBuildScriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        buildAndRunOptionsTabbedPane.addTab("tab2", cleanAndBuildPanel);

        runProjectScriptLabel.setText("Run Project Script:");

        runProjectScriptTextArea.setColumns(20);
        runProjectScriptTextArea.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        runProjectScriptTextArea.setRows(5);
        jScrollPane3.setViewportView(runProjectScriptTextArea);

        javax.swing.GroupLayout runPanelLayout = new javax.swing.GroupLayout(runPanel);
        runPanel.setLayout(runPanelLayout);
        runPanelLayout.setHorizontalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(runPanelLayout.createSequentialGroup()
                        .addComponent(runProjectScriptLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        runPanelLayout.setVerticalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runProjectScriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        buildAndRunOptionsTabbedPane.addTab("tab3", runPanel);

        add(buildAndRunOptionsTabbedPane, java.awt.BorderLayout.CENTER);
        buildAndRunOptionsTabbedPane.getAccessibleContext().setAccessibleName("build");
    }// </editor-fold>//GEN-END:initComponents

    private void buildAndRunOptionsTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buildAndRunOptionsTabbedPaneStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_buildAndRunOptionsTabbedPaneStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane buildAndRunOptionsTabbedPane;
    private javax.swing.JPanel buildPanel;
    private javax.swing.JComboBox buildSequenceComboBox;
    private javax.swing.JLabel buildSequenceLabel;
    private javax.swing.JPanel cleanAndBuildPanel;
    private javax.swing.JLabel cleanAndBuildScriptLabel;
    private javax.swing.JTextField compilerArgumentsTextField;
    private javax.swing.JLabel embeddedCompilerArgumentsLabel;
    private javax.swing.JLabel externalBuildScriptLabel;
    private javax.swing.JTextArea externalBuildScriptTextArea;
    private javax.swing.JTextArea externalCleanAndBuildTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel runPanel;
    private javax.swing.JLabel runProjectScriptLabel;
    private javax.swing.JTextArea runProjectScriptTextArea;
    // End of variables declaration//GEN-END:variables
    
    public void setCompilerArguments(String arguments) {
        this.compilerArgumentsTextField.setText(arguments);
    }
    
    public String getCompilerArguments() {
        return this.compilerArgumentsTextField.getText();
    }
    
    public void setBuildSequence(BuildSequence sequence) {
        this.buildSequenceComboBox.setSelectedItem(sequence);
        this.updateEnableComponents();
    }
    
    public BuildSequence getBuildSequence() {
        return (BuildSequence) this.buildSequenceComboBox.getSelectedItem();
    }
    
    @SuppressWarnings({"rawtypes", "unchecked"})
    private DefaultComboBoxModel getSequencesComboModel() {
        
        DefaultComboBoxModel sequencesComboModel = new DefaultComboBoxModel();
        for(BuildSequence sequence:BuildSequence.values()) {
            sequencesComboModel.addElement(sequence);
        }
        
        return sequencesComboModel;    
    }
    
    public String getBuildScript() {
        return this.externalBuildScriptTextArea.getText();
    }
    
    public void setBuildScript(String script) {
        this.externalBuildScriptTextArea.setText(script);
    }
    
    public String getCleanAndBuildScript() {
        return this.externalCleanAndBuildTextArea.getText();
    }
    
    public void setCleanAndBuildScript(String script) {
        this.externalCleanAndBuildTextArea.setText(script);
    }
    
    public String getRunProjectScript() {
        return this.runProjectScriptTextArea.getText();
    }
    
    public void setRunProjectScript(String script) {
        this.runProjectScriptTextArea.setText(script);
    }
    
    @Override
    public void actionPerformed(ActionEvent event) {
        this.updateEnableComponents();
    }
    
    private void updateEnableComponents() {
        
        switch(this.getBuildSequence()) {
            
            case ONLY_EMBEDDED:
                this.compilerArgumentsTextField.setEnabled(true);
                this.externalBuildScriptTextArea.setEnabled(false);
                break;
                
            case ONLY_BUILD_SCRIPT:
                 this.compilerArgumentsTextField.setEnabled(false);
                 this.externalBuildScriptTextArea.setEnabled(true);
                break;
                
            case FIRST_EMBEDDED_THEN_SCRIPT:
                this.compilerArgumentsTextField.setEnabled(true);
                this.externalBuildScriptTextArea.setEnabled(true);
                break;
                
            default:
                // how did get here? wtf???
                throw new RuntimeException("You have a new build sequence option. " +
                    "Let me guess: You do not have a fuking unit test, do you?");
        }
    }
    
}
