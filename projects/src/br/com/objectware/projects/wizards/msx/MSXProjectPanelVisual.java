/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.objectware.projects.wizards.msx;

import br.com.objectware.commons.i18n.I18N;
import br.com.objectware.commons.utils.Default;
import br.com.objectware.domain.BuildType;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

/**
 * Wizard panel: get the project name and location from user.
 * 
 * @author Luciano M. Christofoletti
 * @since 25/May/2015
 * 
 * Useful docs:
 *     System prperties: https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html
 *     File choosers: https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
 */
public class MSXProjectPanelVisual extends JPanel implements DocumentListener {
    
    public static final String PROP_PROJECT_NAME = "projectName";
    
    // the visual project wizard panel
    private final MSXProjectWizardPanel panel;
    
    // this is the only field that must be reseted when the user goes back to the first wizard panel
    private BuildType currentBuildType;
    
    /**
     * 
     * @param panel 
     */
    public MSXProjectPanelVisual(MSXProjectWizardPanel panel) {
        
        this.initComponents();
        this.panel = panel;
        
        // setup labels' text
        this.browseButton.setText(I18N.getString("browse"));
        this.projectNameLabel.setText(I18N.getString("project.name"));
        this.projectLocationLabel.setText(I18N.getString("project.location"));
        this.createdFolderLabel.setText(I18N.getString("project.folder"));
        this.mainFileLabel.setText(I18N.getString("main.file"));
        this.targetFileLabel.setText(I18N.getString("target.file.name"));
        this.descriptionLabel.setText(I18N.getString("project.description"));
        
        this.setupDocumentListeners();
    }
    
    /**
     * Setup the document listeners.
     */
    private void setupDocumentListeners() {
        // Register listener on the textFields to make the automatic updates
        this.projectNameTextField.getDocument().addDocumentListener(this);
        this.projectLocationTextField.getDocument().addDocumentListener(this);
        this.mainFileTextField.getDocument().addDocumentListener(this);
        this.targetFileTextField.getDocument().addDocumentListener(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        mainFileLabel = new javax.swing.JLabel();
        mainFileTextField = new javax.swing.JTextField();
        targetFileLabel = new javax.swing.JLabel();
        targetFileTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();

        projectNameLabel.setLabelFor(projectNameTextField);
        projectNameLabel.setText("Project &Name:");

        projectLocationLabel.setLabelFor(projectLocationTextField);
        projectLocationLabel.setText("Project &Location:");

        browseButton.setText("Br&owse...");
        browseButton.setActionCommand("BROWSE");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        createdFolderLabel.setText("Project &Folder:");

        createdFolderTextField.setEditable(false);
        createdFolderTextField.setFocusable(false);
        createdFolderTextField.setRequestFocusEnabled(false);

        mainFileLabel.setText("&Main File Name:");

        targetFileLabel.setText("&Target File Name:");

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, "&Description:"); // NOI18N
        descriptionLabel.setRequestFocusEnabled(false);
        descriptionLabel.setVerifyInputWhenFocusTarget(false);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(4);
        descriptionTextArea.setTabSize(4);
        jScrollPane1.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectNameLabel)
                                    .addComponent(projectLocationLabel)
                                    .addComponent(createdFolderLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                                    .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mainFileLabel)
                                    .addComponent(targetFileLabel))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mainFileTextField)
                                    .addComponent(targetFileTextField))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descriptionLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainFileLabel)
                    .addComponent(mainFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param evt 
     */
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        
        String command = evt.getActionCommand();
        
        if ("BROWSE".equals(command)) {
            
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle(I18N.getString("select.project.location"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.projectLocationTextField.getText();
            
            if (path.length() > 0) {
                File file = new File(path);
                if (file.exists()) {
                    chooser.setSelectedFile(file);
                }
            }
            
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                this.projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            
            this.panel.fireChangeEvent();
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainFileLabel;
    private javax.swing.JTextField mainFileTextField;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JLabel targetFileLabel;
    private javax.swing.JTextField targetFileTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        this.projectNameTextField.requestFocus();
    }
    
    /**
     * 
     * @param wizardDescriptor
     * @return 
     */
    boolean valid(WizardDescriptor wizardDescriptor) {
        
        // error message handler
        ErrorMessageHandler messageHandler = new ErrorMessageHandler(wizardDescriptor);
        
        String projectName = this.projectNameTextField.getText();
        if(!this.isValid(projectName)) {
            messageHandler.show("invalid.project.folder.name");
            return false;
        }
        
        String mainFile = this.mainFileTextField.getText();
        if(!this.isValid(mainFile)) {
            messageHandler.show("invalid.main.file.name");
            return false;
        }
        
        String targetFile = this.targetFileTextField.getText();
        if(!this.isValid(targetFile)) {
            messageHandler.show("invalid.target.file.name");
            return false;
        }
        
        File file = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!file.isDirectory()) {
            messageHandler.show("invalid.project.folder.path");
            return false;
        }
        
        File destinationFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
        
        File projectLocation = destinationFolder;
        while (projectLocation != null && !projectLocation.exists()) {
            projectLocation = projectLocation.getParentFile();
        }
        
        if (projectLocation == null || !projectLocation.canWrite()) {
            messageHandler.show("error.creating.project.folder");
            return false;
        }
        
        if (FileUtil.toFileObject(projectLocation) == null) {
            messageHandler.show("invalid.project.folder.path");
            return false;
        }
        
        File[] kids = destinationFolder.listFiles();
        if (destinationFolder.exists() && kids != null && kids.length > 0) {
            // folder exists and is not empty
            messageHandler.show("project.folder.already.exists");
            return false;
        }
        
        // cleanup
        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");
        return true;
    }
    
    /**
     * Verifies if a given file name is valid.
     * @param fileName the file name to be validated
     * @return true if the file name is valid
     */
    private boolean isValid(String fileName) {
        
        try {
            
            // file name cannot be empty
            if (fileName.isEmpty()) {
                throw new Exception();
            }
            
            // tries to get the canonical path of given file name
            (new File(fileName)).getCanonicalPath();
            
            return true;
            
        } catch (Exception exception) {
            // there is something wrong with the given file name...
            return false;
        }
    }
    
    /**
     * 
     * @param wizardDescriptor 
     */
    void store(WizardDescriptor wizardDescriptor) {
        
        String name = this.projectNameTextField.getText().trim();
        String folder = this.createdFolderTextField.getText().trim();
        String main = this.mainFileTextField.getText().trim();
        String target = this.targetFileTextField.getText().trim();
        String description = this.descriptionTextArea.getText();
        
        // store the current properties
        wizardDescriptor.putProperty("project.name", name);
        wizardDescriptor.putProperty("project.dir", new File(folder));
        wizardDescriptor.putProperty("main.file.name", main);
        wizardDescriptor.putProperty("target.file.name", target);
        wizardDescriptor.putProperty("project.description", description);
        
    }
    
    /**
     * This method is invoked every time the user go to the next wizard panel
     * @param wizardDescriptor 
     */
    void read(WizardDescriptor wizardDescriptor) {
        
        File projectLocation = (File) wizardDescriptor.getProperty("project.dir");
        if (projectLocation == null ||
            projectLocation.getParentFile() == null ||
            !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
        
        // the selected project build type
        BuildType buildType = (BuildType) wizardDescriptor.getProperty("project.build.type");
        boolean mustUpdate = !buildType.equals(this.currentBuildType);
        
        String projectName = (String) wizardDescriptor.getProperty("project.name");
        if (projectName == null || mustUpdate) {
            projectName = buildType.getDefaultProjectName();
        }
        
        String mainFileName = (String) wizardDescriptor.getProperty("main.file.name");
        if (mainFileName == null) {
            mainFileName = Default.MAIN_FULL_FILE_NAME;
        }
        
        String targetFileName = (String) wizardDescriptor.getProperty("target.file.name");
        if(targetFileName == null || mustUpdate) {
            targetFileName = Default.MAIN_FILE_NAME + "." + buildType.getExtension();
        }
        
        String projectDescription = (String) wizardDescriptor.getProperty("project.description");
        
        // fill text fields with default/user values
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();
        this.mainFileTextField.setText(mainFileName);
        this.targetFileTextField.setText(targetFileName);
        this.descriptionTextArea.setText(projectDescription);
        
        // this is necessary to verify if the user changed the build type
        this.currentBuildType = buildType;
    }
    
    /**
     * 
     * @param wizardDescriptor
     * @throws WizardValidationException 
     */
    void validate(WizardDescriptor wizardDescriptor) throws WizardValidationException {
        // nothing to validate
    }
    
    // Implementation of DocumentListener --------------------------------------
    @Override
    public void changedUpdate(DocumentEvent e) {
        this.updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            this.firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }
    
    @Override
    public void insertUpdate(DocumentEvent e) {
        this.updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            this.firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }
    
    @Override
    public void removeUpdate(DocumentEvent e) {
        this.updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            this.firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }
    
    /**
     * Handles changes in the Project name and project directory,
     */
    private void updateTexts(DocumentEvent event) {
        
        Document doc = event.getDocument();
        
        if (doc == this.projectNameTextField.getDocument() ||
            doc == this.projectLocationTextField.getDocument()) {
            
            // change in the project name
            String projectName = this.projectNameTextField.getText();
            String projectFolder = this.projectLocationTextField.getText();
            
            //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
            this.createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
            //}
            
        }
        
        this.panel.fireChangeEvent(); // Notify that the panel changed
    }
    
    /**
     * Helper class: only show error messages on wizard panel
     */
    private class ErrorMessageHandler {
        
        private final WizardDescriptor wizardDescriptor;
        
        protected ErrorMessageHandler(WizardDescriptor wizardDescriptor) {
            this.wizardDescriptor = wizardDescriptor;
        }
        
        public void show(String key) {
            this.wizardDescriptor.putProperty(
                WizardDescriptor.PROP_ERROR_MESSAGE, I18N.getString(key)
            );
        }
    }
}
